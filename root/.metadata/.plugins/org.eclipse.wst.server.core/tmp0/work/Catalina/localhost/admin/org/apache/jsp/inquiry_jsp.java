/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.30
 * Generated at: 2024-03-17 11:56:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class inquiry_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

  // Servletのデータ受け取り
  request.setCharacterEncoding("UTF-8");
  String strName = (String) request.getAttribute("name");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<title>照会</title>\r\n");
      out.write("\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("\t<!-- css読みこみ -->\r\n");
      out.write("    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<header class=\"navbar navbar-expand-md navbar\" style=\"background-color: #e3f2fd;\">\r\n");
      out.write("\r\n");
      out.write("\t    <nav class=\"container-xxl flex-wrap flex-md-nowrap\" aria-label=\"Main navigation\">\r\n");
      out.write("\r\n");
      out.write("\t    <div class=\"collapse navbar-collapse\" id=\"bdNavbar\">\r\n");
      out.write("\t      <form id=\"fm_menu\" action=\"/admin/MenuController\" method=\"Post\">\r\n");
      out.write("\t      <ul class=\"navbar-nav flex-row flex-wrap bd-navbar-nav pt-2 py-md-0\">\r\n");
      out.write("\t        <li class=\"nav-item col-6 col-md-auto\">\r\n");
      out.write("\t          <button class=\"nav-link p-2\" onclick=\"exec()\" name=\"name\" value=\"menu\">メニュー</button>\r\n");
      out.write("\t        </li>\r\n");
      out.write("\t        <li class=\"nav-item col-6 col-md-auto\">\r\n");
      out.write("\t          <button class=\"nav-link p-2\" onclick=\"exec()\" name=\"name\" value=\"meet\">面談登録</button>\r\n");
      out.write("\t        </li>\r\n");
      out.write("\t        <li class=\"nav-item col-6 col-md-auto\">\r\n");
      out.write("\t          <button class=\"nav-link p-2 active\"  aria-current=\"true\" onclick=\"exec()\" name=\"name\" value=\"shokai\">社員照会</button>\r\n");
      out.write("\t        </li>\r\n");
      out.write("\t        <li class=\"nav-item col-6 col-md-auto\">\r\n");
      out.write("\t          <button class=\"nav-link p-2\" onclick=\"exec()\" name=\"name\" value=\"insert\">社員登録</button>\r\n");
      out.write("\t        </li>\r\n");
      out.write("\t        <li class=\"nav-item col-6 col-md-auto\">\r\n");
      out.write("\t          <a class=\"nav-link p-2\"  onclick=\"ga('send', 'event', 'Navbar', 'Community links', 'Themes');\" target=\"_blank\" rel=\"noopener\">-----</a>\r\n");
      out.write("\t        </li>\r\n");
      out.write("\t        <li class=\"nav-item col-6 col-md-auto\">\r\n");
      out.write("\t          <a class=\"nav-link p-2\"  onclick=\"ga('send', 'event', 'Navbar', 'Community links', 'Blog');\" target=\"_blank\" rel=\"noopener\">-----</a>\r\n");
      out.write("\t        </li>\r\n");
      out.write("\t      </ul>\r\n");
      out.write("\t\t  </form>\r\n");
      out.write("\t      <hr class=\"d-md-none text-white-50\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t      <form id=\"fm\" action=\"/admin/MainController\" method=\"Get\">\r\n");
      out.write("\r\n");
      out.write("\t      <ul class=\"navbar-nav flex-row ml-md-auto d-none d-md-flex\">\r\n");
      out.write("\r\n");
      out.write("\t        <li class=\"nav-item dropdown\">\r\n");
      out.write("              <a class=\"nav-item nav-link dropdown-toggle mr-md-2\" href=\"#\" id=\"lang\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n");
      out.write("              ");
      out.print(strName );
      out.write("さん\r\n");
      out.write("              </a>\r\n");
      out.write("              <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"lang\">\r\n");
      out.write("                <a class=\"dropdown-item active\" href=\"/docs/4.3/\"> ");
      out.print(strName );
      out.write("さん </a>\r\n");
      out.write("                <a id=\"logout\" class=\"dropdown-item\">ログアウト</a>\r\n");
      out.write("              </div>\r\n");
      out.write("            </li>\r\n");
      out.write("\t      </ul>\r\n");
      out.write("\r\n");
      out.write("    \t  </form>\r\n");
      out.write("        </div>\r\n");
      out.write("  \t\t</nav>\r\n");
      out.write("\t</header>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"container-xxl bd-gutter mt-3 my-md-4 bd-layout\">\r\n");
      out.write("    <h2>照会ページ</h2>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");
 int count = (int) request.getAttribute("count");
               String[] ids = (String[]) request.getAttribute("resID");
               String[] names = (String[]) request.getAttribute("resName");
               String[] kanas = (String[]) request.getAttribute("resKananame");
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <form id=\"fm\" action=\"/admin/MeetMenuController\" method=\"post\">\r\n");
      out.write("    <table class=\"table table-striped\">\r\n");
      out.write("      <tr>\r\n");
      out.write("        <th scope=\"col\">社員番号</th>\r\n");
      out.write("        <th scope=\"col\">名前</th>\r\n");
      out.write("        <th scope=\"col\">カナ</th>\r\n");
      out.write("        <th scope=\"col\"></th><!-- btn -->\r\n");
      out.write("      </tr>\r\n");
      out.write("      ");
 for (int i = 0; i < count; i++) { 
      out.write("\r\n");
      out.write("      <tr>\r\n");
      out.write("        <!-- 本当は選択したclassのデータを引っ張ってサーブレットに送りたかった -->\r\n");
      out.write("        <td scope=\"row\" class=\"id\">");
      out.print( ids[i] );
      out.write("<input type=\"hidden\" name=\"ids");
      out.print( i );
      out.write("\" value=\"");
      out.print( ids[i] );
      out.write("\"></td>\r\n");
      out.write("        <td scope=\"row\" class=\"name\">");
      out.print( names[i] );
      out.write("<input type=\"hidden\" name=\"names");
      out.print( i );
      out.write("\" value=\"");
      out.print( names[i] );
      out.write("\"></td>\r\n");
      out.write("        <td scope=\"row\" class=\"kana\">");
      out.print( kanas[i] );
      out.write("<input type=\"hidden\" name=\"kanas");
      out.print( i );
      out.write("\" value=\"");
      out.print( kanas[i] );
      out.write("\"></td>\r\n");
      out.write("        <td scope=\"row\"><button class=\"btn btn-primary\" name=\"check\" value=\"");
      out.print( i );
      out.write("\" onclick=\"editRow(this)\">照会</button></td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      ");
 } 
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<!-- js読みこみ -->\r\n");
      out.write("<script src=\"js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    function editRow(button) {\r\n");
      out.write("        var form = document.getElementById(\"fm\");\r\n");
      out.write("        form.action = \"/admin/MeetMenuController\"; // サーブレットのURLを指定\r\n");
      out.write("        form.method = \"Post\"; // POSTメソッドを指定\r\n");
      out.write("\r\n");
      out.write("        form.submit(); // フォームを送信\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
